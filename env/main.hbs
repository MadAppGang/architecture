terraform {
  backend "s3" {
    bucket = "{{ state_bucket }}"
    key    = "{{ state_file }}"
    region = "{{ region  }}"
  }
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
  required_version = ">= 1.2.6"
}

data "aws_vpc" "default" {
  default = true
}

data "aws_caller_identity" "current" {}
data "aws_region" "current" {}
data "aws_subnets" "all" {
  filter {
    name   = "vpc-id"
    values = [data.aws_vpc.default.id]
  }
}

{{#if domain.enabled}}  
  {{#if domain.use_existent}}
data "aws_route53_zone" "domain" {
  name  = var.domain
}
data "aws_acm_certificate" "domain" {
  domain      = "*.${var.env == "prod" ? "api." : format("%s.", var.env)}${var.domain}" 
  types       = ["AMAZON_ISSUED"]
  most_recent = true
}
data "root_aws_acm_certificate" "domain" {
  domain      = "${var.env == "prod" ? "api." : format("%s.", var.env)}${var.domain}"
  types       = ["AMAZON_ISSUED"]
  most_recent = true
}
  {{else}}
module "domain" {
  source = "{{ modules }}/domain"
  domain = "{{ domain.domain_name  }}"
  env = "{{ env }}"
}
  {{/if}}
{{/if}}


{{#if postgres.enabled}} 
module "postgres" {
  source = "{{modules}}/postgres"
  project = "{{project}}"
  env = "{{env}}"
  vpc_id     = data.aws_vpc.default.id
  db_name = "{{postgres.dbname}}"
  username = "{{postgres.username}}"
  public_access = {{ postgres.public_access }}
  engine_version = "{{ postgres.engine_version}}"
}
{{/if}}

module "workloads" {
  source = "{{ modules }}/workloads"
  project    = "{{project}}"
  env        = "{{env}}" 
  domain     = "{{domain.domain_name}}"
  private_dns_name = "{{project}}_{{env}}.private"
  vpc_id     = data.aws_vpc.default.id
  subnet_ids = data.aws_subnets.all.ids
  lambda_path = "{{modules}}/workloads/ci_lambda/bootstrap"
  slack_deployment_webhook = "{{workload.slack_webhook}}"
  backend_bucket_postfix = "{{workload.bucket_postfix}}"
  backend_bucket_public = {{workload.bucket_public}}
  backend_health_endpoint = "{{workload.backend_health_endpoint}}"
  docker_image = "{{workload.backend_external_docker_image}}"
  setup_FCM_SNS = {{workload.setup_fcnsns}}
  backend_image_port = {{workload.backend_image_port}}
  {{#if postgres.enabled}}

  db_endpoint = module.postgres.endpoint
  db_user = "{{postgres.username}}"
  db_name = "{{postgres.dbname}}"
  {{/if}}
  {{#if domain.enabled}}{{#if domain.use_existent}}
  certificate_arn = data.aws_acm_certificate.arn
  root_certificate_arn = data.root_aws_acm_certificate.arn
  domain_zone_id = module.domain.zone_id
    {{else}}
  certificate_arn = module.domain.certificate_arn
  root_certificate_arn = module.domain.root_certificate_arn
  domain_zone_id = module.domain.zone_id
  {{/if}}{{/if}}
  {{#if ecr_account_id}}{{#if ecr_account_region}}
  ecr_url = "{{ecr_account_id}}.dkr.ecr.{{ecr_account_region}}.amazonaws.com/{{project}}_backend"
  {{/if}}{{/if}}
  github_oidc_enabled = {{workload.enable_github_oidc}}
  github_subjects = {{{array workload.github_oidc_subjects}}}
  {{#if workload.backend_container_command}}
  backend_container_command = {{array backend_container_command}}
  {{/if}}
  {{#if postgres.enabled}}
  pgadmin_enabled = {{workload.install_pg_admin}}
  pgadmin_email = "{{workload.pg_admin_email}}"   
  {{/if}}
  xray_enabled = {{workload.xray_enabled}}
  {{#if workload.backend_env_variables}}
  backend_env = {{{envToMap workload.backend_env_variables}}}
  {{/if}}
}
{{#if cognito.enabled}} 
module "cognito" {
  source                  = "{{modules}}/cognito"
  project                 = "{{project}}"
  env                     = "{{env}}"
  enable_web_client       = "{{cognito.enable_web_client}}"
  enable_dashboard_client = {{cognito.enable_dashboard_client}}
  dashboard_callback_urls = {{array cognito.dashboard_callback_urls}}

  enable_user_pool_domain = {{cognito.enable_user_pool_domain}}
  user_pool_domain_prefix = "{{cognito.user_pool_domain_prefix}}"

  allow_backend_task_to_confirm_signup = {{cognito.backend_confirm_signup}}
  auto_verified_attributes = {{array cognito.auto_verified_attributes}}
  backend_task_role_name  = module.workloads.backend_task_role_name
}
{{/if}}
{{#each scheduled_tasks}}
# scheduled task
# https://docs.aws.amazon.com/scheduler/latest/UserGuide/setting-up.html#setting-up-execution-role
module "task" {
  source = "{{@root.modules}}/ecs_task"
  project = "{{@root.project}}"
  env = "{{@root.env}}"
  task = "{{name}}"
  {{#if docker_image}}
  docker_image = "{{docker_image}}"
  {{/if}}
  {{#if docker_command}}
  docker_command = {{array docker_command}}
  {{/if}}
  # https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html?icmpid=docs_console_unmapped#rate-based
  schedule = "{{schedule}}"
  subnet_ids = data.aws_subnets.all.ids
  vpc_id     = data.aws_vpc.default.id
  cluster = module.workloads.ecr_cluster.arn
  {{#if ecr_account_id}}{{#if ecr_account_region}}
  ecr_url = "{{ecr_account_id}}.dkr.ecr.{{ecr_account_region}}.amazonaws.com/{{project}}_task_{{name}}"
  {{/if}}{{/if}}
}
{{/each}}
{{#each event_processor_tasks}}
module "event_bus_task" {
  source = "{{@root.modules}}/ecs_task"
  project = "{{@root.project}}"
  env = "{{@root.env}}"
  # https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-events.html
  detail_types ={{array detail_types}}
  sources =  {{array sources}}
  rule_name = "{{rule_name}}"
  task = "{{name}}"
  {{#if docker_image}}
  docker_image = "{{docker_image}}"
  {{/if}}
  {{#if docker_command}}
  docker_command = {{array docker_command}}
  {{/if}}
  subnet_ids = data.aws_subnets.all.ids
  vpc_id     = data.aws_vpc.default.id
  cluster = module.workloads.ecr_cluster.arn
  {{#if ecr_account_id}}{{#if ecr_account_region}}
  ecr_url = "{{ecr_account_id}}.dkr.ecr.{{ecr_account_region}}.amazonaws.com/{{project}}_task_{{name}}"
  {{/if}}{{/if}}
}
{{/each}}

{{#if ses.enabled}} 
module "ses" {
  env     = "{{env}}"
  source = "{{modules}}/ses"
  {{#if ses.domain_name}}
  domain = "{{ses.domain_name}}"
  {{else}}
  domain = "{{domain.domain_name}}"
  {{/if}}
  test_emails = {{{array ses.test_emails}}}
  {{#if domain.enabled}}
  {{#if domain.use_existent}}
  zone_id = data.aws_route53_zone.domain.zone_id
  {{else}}
  zone_id = module.domain.zone_id
  {{/if}}
  {{/if}}
}
{{/if}}



{{#if pubsub_appsync.enabled}} 
module "appsync" {
  source = "{{modules}}/appsync"
  project = "{{project}}"
  env = "{{env}}"
  {{#if pubsub_appsync.schema}}
  schema_file = "{{custom_modules}}/appsync/schema.graphql"
  {{/if}}
  {{#if appsync.resolvers}}
  vtl_templates_yaml = "{{custom_modules}}/appsync/vtl_templates.yaml"
  {{/if}}
  {{#if pubsub_appsync.appsync.auth_lambda}}
  auth_lambda_path = "{{custom_modules}}/appsync/auth_lambda"
  {{/if}}
}
{{/if}}


output "backend_ecr_repo_url" {
  value = module.workloads.backend_ecr_repo_url
}

output "account_id" {
  value = module.workloads.account_id
}

output "region" {
  value = data.aws_region.current.name
}

output "backend_task_role_name" {
  value = module.workloads.backend_task_role_name
}

output "backend_cloud_map_arn" {
  description = "value of the backend service discovery ARN"
  value       = module.workloads.backend_cloud_map_arn
}
