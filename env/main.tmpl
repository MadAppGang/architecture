terraform {
  backend "s3" {
    bucket = {{ .vars.state_bucket | quote }}
    {{- if and  (index .vars "state_file") (.vars.state_file) }} 
    key    = {{ .vars.state_file | quote }}
    {{- else}}
    key    = "state.tfstate"
    {{- end}}
    region = {{- .vars.region | quote }}
  }
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.25"
    }
  }
  required_version = ">= 1.2.6"
}

data "aws_vpc" "default" {
  default = true
}
data "aws_caller_identity" "current" {}
data "aws_region" "current" {}
data "aws_subnets" "all" {
  filter {
    name   = "vpc-id"
    values = [data.aws_vpc.default.id]
  }
}

{{- if and (index .vars "setup_domain") (.vars.setup_domain) }} 
module "domain" {
  source = "{{ .vars.modules }}/domain"
  domain = {{ .vars.domain | quote }}
  env = {{ .vars.env | quote }}
}
{{- else}}
data "aws_route53_zone" "domain" {
  name  = var.domain
}
data "aws_acm_certificate" "domain" {
  domain      = "*.${var.env == "prod" ? "app." : format("%s.", var.env)}${var.domain}"
  types       = ["AMAZON_ISSUED"]
  most_recent = true
}
{{- end}}

{{- if .vars.setup_postgres}} 
module "postgres" {
  source = "{{ .vars.modules }}/postgres"
  project = {{- .vars.project | quote }}
  env = {{- .vars.env | quote }}
  vpc_id     = data.aws_vpc.default.id
  db_name = {{- .vars.pg_db_name | quote }} 
  username = {{- .vars.pg_username | quote }} 
  {{- if and (index .vars "pg_public") (.vars.pg_public)}}
  public = {{ .vars.pg_public }}
  {{- end }}
  {{- if and (index .vars "pg_engine") (.vars.pg_engine)}}
  engine_version = {{ .vars.pg_engine | quote }}
  {{- end }}
}
{{- end}}

module "workloads" {
  source = "{{ .vars.modules }}/workloads"

  project    = {{- .vars.project | quote }}
  env        = {{- .vars.env | quote}} 
  domain     = {{- .vars.domain | quote}}
  private_dns_name = "{{  .vars.project }}_{{ .vars.env }}.private"
  vpc_id     = data.aws_vpc.default.id
  subnet_ids = data.aws_subnets.all.ids
  lambda_path = "{{ .vars.modules }}/workloads/ci_lambda/main"
  {{- if and (index .vars "slack_deployment_webhook") (.vars.slack_deployment_webhook)}}
  slack_deployment_webhook = {{ .vars.slack_deployment_webhook | quote }}
  {{- end}}
  {{- if and (index .vars "image_bucket_postfix") (.vars.image_bucket_postfix) }}
  image_bucket_postfix = {{ .vars.image_bucket_postfix | quote }}
  {{- end}}
  {{- if and (index .vars "image_bucket_public") (.vars.image_bucket_public)}}
  image_bucket_public = {{ .vars.image_bucket_public }}
  {{- end}}
  {{- if .vars.setup_postgres}}
  db_endpoint = module.postgres.endpoint
  db_user = {{- .vars.pg_username | quote}}
  db_name = {{- .vars.pg_db_name | quote}}
  {{- end}}
  {{- if .vars.health_endpoint}}  
  backend_health_endpoint = {{- .vars.health_endpoint | quote }}
  {{- end}}
  {{- if and (index .vars "setup_domain") (.vars.setup_domain) }} 
  zone_id = module.domain.zone_id
  certificate_arn = module.domain.certificate_arn
  {{- else}}
  zone_id = data.aws_route53_zone.domain.zone_id
  certificate_arn = data.aws_acm_certificate.arn
  {{- end}}
  
  {{- if and (index .vars "ecr_account_id")  (.vars.ecr_account_id) }}
  {{- if and (index .vars "ecr_account_region")  (.vars.ecr_account_region) }}
  ecr_url = "{{ .vars.ecr_account_id }}.dkr.ecr.{{ .vars.ecr_account_region }}.amazonaws.com/{{ .vars.project }}_backend"
  mockoon_ecr_url = "{{ .vars.ecr_account_id }}.dkr.ecr.{{ .vars.ecr_account_region }}.amazonaws.com/{{ .vars.project }}_mockoon"
  {{- end }}
  {{- end }}
  setup_FCM_SNS = {{- .vars.setup_FCM_SNS | quote }}
  {{- if and (index .vars "mockoon")  (.vars.mockoon) }}
  mockoon_enabled = true
  {{- end }}
  {{- if and (index .vars "backend_image_port")  (.vars.backend_image_port) }}
  backend_image_port = {{ .vars.backend_image_port }}
  {{- end }}

  {{- if and (index .vars "github_oidc_enabled") .vars.github_oidc_enabled }}
  github_oidc_enabled = {{- .vars.github_oidc_enabled }}
  {{- end}}

  {{- if and (index .vars "github_subjects")  .vars.github_subjects }}
  github_subjects = [{{range $i, $v := .vars.github_subjects}}{{if $i}} ,{{end}}{{- $v | quote }}{{end}}]
  {{- end}}


  {{- if and (index .vars "backend_container_command")  (.vars.backend_container_command) }}
  backend_container_command = [ {{- range .vars.backend_container_command}}{{ . | quote }},{{end}} ]
  {{- end }}
  {{- if and (index .vars "pgadmin_enabled") .vars.pgadmin_enabled }}
  pgadmin_enabled = {{- .vars.pgadmin_enabled }}
  {{- if and (index .vars "pgadmin_email") .vars.pgadmin_email }}
  pgadmin_email = {{- .vars.pgadmin_email | quote }}  
  {{- end}}
  {{- end}}
  {{- if and (index .vars "xray_enabled")  .vars.xray_enabled }}
  xray_enabled = {{- .vars.xray_enabled }}
  {{- end}}
  {{- if and (index .vars "backend_env") .vars.backend_env }}
  backend_env = [
  {{- range .vars.backend_env }}
    { "name" : upper({{ .name | quote }}), "value" : {{ .value | quote }} },
  {{- end }}
  ]
  {{- end }}
}


{{- if .vars.setup_cognito }} 
module "cognito" {
  source                  = "{{ .vars.modules }}/cognito"
  project                 = {{- .vars.project | quote }}
  env                     = {{- .vars.env | quote }}
  enable_web_client       = {{- .vars.enable_web_client | quote }}
  {{- if .vars.enable_dashboard_client}}
  enable_dashboard_client = {{- .vars.enable_dashboard_client | quote }}
  dashboard_callback_urls = [{{- range $i, $v := .vars.dashboard_callback_urls}}{{if $i}} ,{{end}}{{- $v | quote }}{{end}}]
  {{- end}}
  {{- if .vars.enable_user_pool_domain}}
  enable_user_pool_domain = {{- .vars.enable_user_pool_domain | quote }}
  user_pool_domain_prefix = {{- .vars.user_pool_domain_prefix | quote }}
  {{- end}}
  {{- if .vars.allow_backend_task_to_confirm_signup}}
  allow_backend_task_to_confirm_signup = {{- .vars.allow_backend_task_to_confirm_signup | quote }}
  {{- end}}
  auto_verified_attributes = [{{- range $i, $v := .vars.auto_verified_attributes}}{{if $i}} ,{{end}}{{- $v | quote }}{{end}}]
  backend_task_role_name  = module.workloads.backend_task_role_name
}
{{- end}}

{{- if (index .vars "scheduled_tasks") }}
{{- range .vars.scheduled_tasks }}
# scheduled task
# https://docs.aws.amazon.com/scheduler/latest/UserGuide/setting-up.html#setting-up-execution-role
module "task" {
  source = "{{ .vars.modules }}/ecs_task"
  project = {{- $.vars.project | quote }}
  env = {{- $.vars.env | quote }}
  task = {{- .name | quote }}
  subnet_ids = data.aws_subnets.all.ids
  vpc_id     = data.aws_vpc.default.id
  cluster = module.workloads.ecr_cluster.arn
# https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html?icmpid=docs_console_unmapped#rate-based
  schedule = {{- .schedule | quote }}
  {{- if and .vars.ecr_account_id .vars.ecr_account_region }}
  ecr_url = "{{ .vars.ecr_account_id }}.dkr.ecr.{{ .vars.ecr_account_region }}.amazonaws.com/{{ .vars.project }}_task_{{ .name }}"
  {{- end }}
}
{{- end }}
{{- end }}




{{- if (index .vars "event_tasks") }}
{{ range .vars.event_tasks }}
module "event_bus_task" {
  source  = "{{ .vars.modules }}/event_bridge_task"
  # https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-events.html
  detail_types =[{{range $i, $v := .detail_types}}{{if $i}} ,{{end}}{{- $v | quote }}{{end}}]
  sources =  [{{range $i, $v := .sources}}{{if $i}} ,{{end}}{{- $v | quote }}{{end}}]
  rule_name = {{- .rule_name | quote }}
  project = {{- $.vars.project | quote }}
  env =  {{- $.vars.env | quote }}
  task = {{- .name | quote }}
  subnet_ids = data.aws_subnets.all.ids
  vpc_id     = data.aws_vpc.default.id
  cluster = module.workloads.ecr_cluster.arn
  {{- if and .vars.ecr_account_id .vars.ecr_account_region }}
  ecr_url = "{{ .vars.ecr_account_id }}.dkr.ecr.{{ .vars.ecr_account_region }}.amazonaws.com/{{ .vars.project }}_task_{{ .name }}"
  {{- end }}
}
{{- end }}
{{- end }}


{{- if and (index .vars "setup_ses") (.vars.setup_ses) }} 
module "ses" {
  source = "{{ .vars.modules }}/ses"
  domain = {{- or .vars.ses_domain .vars.domain | quote }}
  env     = {{- .vars.env | quote }}
  test_emails = [{{range $i, $v := .vars.ses_test_emails}}{{if $i}} ,{{end}}{{- $v | quote }}{{end}}]
  {{- if and (index .vars "setup_domain") (.vars.setup_domain)}} 
  zone_id = module.domain.zone_id
  {{- else}}
  zone_id = data.aws_route53_zone.domain.zone_id
  {{- end}}
}
{{- end }}

output "backend_ecr_repo_url" {
  value = module.workloads.backend_ecr_repo_url
}

output "account_id" {
  value = module.workloads.account_id
}

output "region" {
  value = data.aws_region.current.name
}

output "backend_task_role_name" {
  value = module.workloads.backend_task_role_name
}
